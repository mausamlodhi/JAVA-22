Q1.WAP to find all palindrom number in an Array????
import java.util.Scanner;
public class Practice
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the size of an array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        //System.out.println("Palindrom number's are : ");
        for(int i=0;i<n;i++)
        {
            int temp=arr[i];
            int r,sum=0;
            while(arr[i]>0)
            {
                r=arr[i]%10;
                sum=sum*10+r;
                arr[i]=arr[i]/10;
            }
            if(sum==temp)
                System.out.println("Palindrom = "+temp);
        }
    }
}
***************************************************************************
Q2.WAP to search an element in given array???
import java.util.Scanner;
public class Practice03
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the size of an Array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        System.out.println("Enter the element to search : ");
        int num=sc.nextInt();
        int count=1;
        for(int i=0;i<n;i++)
        {
            if(num==arr[i])
            {
                System.out.println("Element is avialable at "+i+" index.");
                count++;
            }
        }
        if(count==1)
            System.out.println("Not found");
    }
}
**********************************************************************************
Q3.WAP to replace each element with it factoeial value???
import java.util.Scanner;
public class Practice
{
    public static void main(String[] args)
    {
        int n;
        int temp=0;
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the size of an array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        System.out.print("Origional Array : ");
        for(int i=0;i<n;i++)
            System.out.print(arr[i]+" ");
        System.out.println();
        System.out.print("Array with it's factorial : ");
        for(int i=0;i<n;i++)
        {
            int f=1;
            for(int j=1;j<=arr[i];j++)
                f=f*j;
            temp=arr[i];
            arr[i]=f;
            f=arr[i];
            System.out.print(f+" ");
        }
    }
}
********************************************************************************8
Q4.WAP to reverse the array???
import java.util.Scanner;
//import java.util.Arrays;
public class Intersection
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the Array size : ");
        int n=sc.nextInt();
        int j=n-1;
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the " + (i + 1) + " element : ");
            arr[i] = sc.nextInt();
        }
        System.out.print("Origional Array : ");
        for(int i=0;i<n;i++)
            System.out.print(arr[i]+" ");
        for(int i=0;i<n/2;i++)
        {
            if(i!=n/2)
	      {
	    	arr[i]=arr[i]+arr[j-i];
            	arr[j-i]=arr[i]-arr[j-i];
            	arr[i]=arr[i]-arr[j-i];
              }
	}
        System.out.println();
        System.out.print("Reversed Array : ");
        for(int i=0;i<n;i++)
            System.out.print(arr[i]+" ");

    }
}
**********************************************************************
Q5.WAP to print all prime number's in an Array???
import java.util.Scanner;
public class Practice03
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number the size of an array : ");
        n = sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        System.out.println("Origional Array : ");
        for(int i=0;i<n;i++)
            System.out.print(arr[i]+" ");
        System.out.println();
        System.out.println("Prime number's : ");
        for(int i=0;i<n;i++)
        {
            int count=1;
            for(int j=2;j<arr[i];j++)
            {
                if(arr[i]%j==0)
                    count++;
            }
            if(count<=1)
                System.out.print(arr[i]+" ");
        }
    }
}
*************************************************************************
Q7WAP to print Even number's and odd number's and Negative ???
import java.util.Scanner;
public class Array01
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n,k=0,l=0,m=0;
        System.out.print("Enter the size of an Array : ");
        n=sc.nextInt();
        int[] arr = new int[n];
        int[] pos=new int[n];
        int[] even=new int[n];
        int[] odd=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++) {
            if (arr[i] <= 0)
                pos[k++] = i;
        }
        for(int i=0;i<n;i++)
        {
            if (arr[i]>=0&&arr[i] % 2 == 0)
                even[l++] = i;
        }
        for(int i=0;i<n;i++)
        {
            if (arr[i]>=0&&arr[i] % 2 == 1)
                even[m++] = i;
        }
        if(k!=0)
        {
            System.out.print("Negative number's found "+k+" times at index ");
            for(int i=0;i<k;i++)
                System.out.print(pos[i]+" ");
            System.out.println();
        }
        if(m!=0)
        {
            System.out.print("Odd number's found "+m+" times at index ");
            for(int i=0;i<m;i++)
                System.out.print(odd[m]+" ");
            System.out.println();
        }
        if(l!=0)
        {
            System.out.print("Even number's found "+l+" times at index ");
            for(int i=0;i<l;i++)
                System.out.print(odd[l]+" ");
            System.out.println();
        }
        else
            System.out.print("Element not found...");
    }
}
*************************************************************************************
Q7.Q.1 Peak an element

An element is called a peak element if its value is not smaller than the value of its adjacent elements(if they exists).
Given an array arr[] of size N, find the index of any one of its peak elements.
Note: The generated output will always be 1 if the index that you return is correct. Otherwise output will be 0.

Example 1:
Input:
N = 3
arr[] = {1,2,3}
Output: 1
Explanation: index 2 is 3.
It is the peak element as it is 
greater than its neighbour 2.
Example 2:
Input:
N = 2
arr[] = {3,4}
Output: 1
Explanation: 4 (at index 1) is the 
peak element as it is greater than 
its only neighbour element 3.
Constraints:
1 ≤ N ≤ 105
1 ≤ A[] ≤ 106
import java.util.Scanner;
public class Array01
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n,i;
        System.out.print("Enter the sizeof an Array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        for(i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        if(n==1)
            System.out.println("0");
        if(n==2)
        {
            if(arr[0]>arr[1])
                System.out.println("0");
            System.out.println("1");
        }
        else
        {
            if(arr[0]>=arr[i])
                System.out.println("");
            if(arr[n-1]>=arr[n-2])
                System.out.println(n-1);
            for(i=1;i<=n-2;i++)
            {
                if(arr[i]>=arr[n-1]&&arr[i]>arr[i+1])
                    System.out.println(i);
            }
            System.out.println("0");
        }
    }
}
**********************************************************************************
Q8.Find minimum and maximum element in array
import java.util.Scanner;
public class Array01
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n;
        System.out.print("Enter the size of an Array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        int max= -2147483648;
        int min= 2147483647;
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++)
        {
            if(arr[i]>max)
                max=arr[i];
            if(arr[i]< min)
                min = arr[i];

        }

        System.out.println("Minimum element = "+min);
        System.out.println("Maximum element = "+max);

    }
}
**************************************************************************************
Q9.Count pair with given sum.
Given an array of N integers, and an integer K, find the number of pairs of elements in the array whose sum is equal to K.

Example 1:
Input:
N = 4, K = 6
arr[] = {1,5,7,1}
Output: 2
Explanation: 
arr[0] + arr[1] = 1 + 5 = 6 
and arr[1] + arr[3] = 5 + 1 = 6.

Example 2:
Input:
N = 4, X = 2
arr[] = {1, 1, 1, 1}
Output: 6
Explanation:
Each 1 will produce sum 2 with any 1.
import java.util.Scanner;
public class Array01
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n,i;
        System.out.print("Enter the sizeof an Array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        for(i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        int k;
        System.out.print("Enter the sum to found : ");
        k=sc.nextInt();
        int count=0;
        for(i=0;i<n-1;i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                if (arr[i] + arr[j] == k)
                    count++;
            }
        }
        if(count>=0)
            System.out.println(count);
    }
}
***************************************************************************************
Q10.Given an unsorted array arr[] of size N having both negative and positive integers. The task is place all negative element at the end of array without changing the order of positive element and negative element.

Example 1:
Input : 
N = 8
arr[] = {1, -1, 3, 2, -7, -5, 11, 6 }
Output : 
1  3  2  11  6  -1  -7  -5

Example 2:
Input : 
N=8
arr[] = {-5, 7, -3, -4, 9, 10, -1, 11}
Output :
7  9  10  11  -5  -3  -4  -1
public class Intersection
{
    public static void main(String[] args)
    {
       int[] arr={1,-1,3,2,-7,-5,11,6};
       int temp;
       for(int i=0;i<arr.length-1;i++)
       {
           if(arr[i]<0)
           {
               for(int j=i+1;j<arr.length;j++)
               {
                   if(arr[j]>0)
                   {
                       for(int k=j;k>i;k--)
                       {
                           temp=arr[k];
                           arr[k]=arr[k-1];
                           arr[k-1]=temp;
                       }
                       break;
                   }
               }
           }
       }
       for(int i=0;i<arr.length;i++)
           System.out.print(arr[i]+" ");
        System.out.println();
    }
}
******************************************************************************************************************
Q11.Find the Union and Intersaction of two sorted array.
Given two arrays a[] and b[] of size n and m respectively. The task is to find union between these two arrays. 
Union of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.
Example 1:
Input:
5 3
1 2 3 4 5
1 2 3
Output: 
5
Explanation: 
1, 2, 3, 4 and 5 are the
elements which comes in the union set
of both arrays. So count is 5.
Example 2:
Input:
6 2 
85 25 1 32 54 6
85 2 
Output: 
7
Explanation: 
85, 25, 1, 32, 54, 6, and
2 are the elements which comes in the
union set of both arrays. So count is 7.
public class Intersection
{
    public static void main(String[] args)
    {
        int[] a={1,1,2,4};
        int[] b={1,2,3,6,7};
        int i,j,k=0,element;
        int[] union=new int[a.length+b.length];
        union[k++]=a[0];
        for(i=0;i<a.length;i++)
        {
            element=a[i];
            for(j=0;j<k;j++)
            {
                if(element==union[j])
                    break;
            }

            if(j==k)
            {
                union[k++]=element;
            }
        }
        for(i=0;i<b.length;i++)
        {
            element=b[i];
            for(j=0;j<k;j++)
            {
                if(element==union[j])
                    break;
            }
            if(j==k)
                union[k++]=element;
        }
        for(i=0;i<k;i++)
            System.out.print(union[i]+" ");
    }
}
*************************************************************************************
Q12.Write a program to cyclically rotate array by one.
public class Intersection
{
    public static void main(String[] args)
    {
        int[] arr={2,6,7,3,5,1,9};
        int temp=arr[arr.length-1];
        int i;
        for(i=arr.length-1;i>=1;i--)
            arr[i]=arr[i-1];
        arr[i]=temp;
        for(int element:arr)
            System.out.print(" "+element); 
        System.out.println();
    }
}
******************************************************************************
Q13.Find the first repeating element in array of integers??
import java.util.Scanner;
public class Intersection
{
    public static void main(String[] args)
    {
        int count=0,i,j;
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter ther size of an Array : ");
        int n=sc.nextInt();
        int[] arr=new int[n];
        for(i=0;i<n;i++)
        {
            System.out.print("Enter the elements : ");
            arr[i]=sc.nextInt();
        }
        for(i=0;i<n-1;i++)
        {
            for(j=i+1;j<n;j++)
            {
                if (arr[i] == arr[j])
                {
                    count++;
                    //break;
                }
            }
        }
        if(count>0)
          System.out.println("First repeating element : "+arr[i]);
        else
            System.out.println("First repeating element is not Avialable ");
    }
}
***************************************************************************************
Q14Find common elements in three sorted arrays.
Given three arrays sorted in increasing order. Find the elements that are common in all three arrays.
Note: can you take care of the duplicates without using any additional Data Structure?
Example 1:
Input:
n1 = 6; A = {1, 5, 10, 20, 40, 80}
n2 = 5; B = {6, 7, 20, 80, 100}
n3 = 8; C = {3, 4, 15, 20, 30, 70, 80, 120}
Output: 20 80
Explanation: 20 and 80 are the only
common elements in A, B and C.
import java.util.Scanner;
public class Intersection
{
    public static void main(String[] args)
    {
        int[] A = {1, 5, 10, 20, 40, 80};
        int[] B = {6, 7, 20,10, 100};
        int[] C = {3, 4, 15, 30,70, 80, 120};
        int[] repet=new int[A.length];
        int p=0;
        for(int i=0;i<A.length;i++)
        {
            for(int j=0;j<B.length;j++)
            {
                if(A[i]==B[j])
                {
                    for(int k=0;k<C.length;k++)
                    {
                        if(B[j]==C[k])
			   {
                            repet[p++]=C[k];
                 	    break;   
		           }
		    }
		    break;
                }
            }
        }
        if(p>0)
        {
            System.out.print("The common elements ia a three Aray : ");
            for (int i = 0; i < p; i++)
                System.out.print(repet[i] + " ");
        }
        else
            System.out.println("No one element is repeated in all three arays ...");
    }
}
***********************************************************************************************
Q19.Find Maximum product contigeous sub array 

Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.
Example 1:
Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is [6, -3, -10] which gives product as 180.
Example 2:
Input:
N = 6
Arr[] = {2, 3, 4, 5, -1, 0}
Output: 120
Explanation: Subarray with maximum product
is [2, 3, 4, 5] which gives product as 120.
public class Intersection
{
    public static void main(String[] args)
    {
        int[] arr={2,-3,-4,-5,0,9};
        int k=0;
        int n=arr.length;
        int m=n;
        int[] product=new int[arr.length];
        for(int i=0;i<n;i++)
        {
            int pro=1;
            for (int j=0;j<m;j++)
            {
                pro = pro * arr[j];
            }
            product[k++] = pro;
            m--;
        }
        int max=-214847364;
        for(int i=0;i<k;i++)
        {
            if(product[i]>max)
                max=product[i];
        }
        System.out.println(max);
    }
}
**********************************************************************************
Other solution....
public class Intersection
{
    public static void main(String[] args)
    {
      int i;
      int pro=1;
      int max=-2147483647;
      int[] x = {1,4,-7,5,0,5};
      for(i=0;i<x.length;i++)
      {
          pro*=x[i];
          if(pro>max)
              max=pro;
      }
        System.out.print(max+" ");
    }
}
************************************************************************************
Q21. Longest consecutive sequence.
Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Example 1:
Input:
N = 7
a[] = {2,6,1,9,4,5,3}
Output:
6
Explanation:
The consecutive numbers here
are 1, 2, 3, 4, 5, 6. These 6 
numbers form the longest consecutive
subsquence.
Example 2:
Input:
N = 7
a[] = {1,9,3,10,4,20,2}
Output:
4
Explanation:
1, 2, 3, 4 is the longest
consecutive subsequence.
import java.util.Arrays;
public class Intersection
{
    public static void main(String[] args)
    {
           int[] arr={3,1,2,4,9,5};
           int count=0;
           Arrays.sort(arr);
           for(int i=0;i<arr.length;i++)
               System.out.print(" "+arr[i]);
            for(int i=0;i<arr.length-1;i++)
            {
                arr[i]++;
                for(int j=i+1;j<arr.length;j++)
                {
                   if(arr[i]==arr[j])
                       count++;
                }
            }
        System.out.println();
        System.out.println(++count);
    }
}
*******************************************************************************************************************
Q22.C program to find nearest lesser and greater element in array
Given an array of N elements and we have to find nearest lesser and nearest greater element using C program.
Example:
    Input:
    Enter the number of elements for the arrray : 3  

    Enter the elements for array_1.. 
    array_1[0] : 1   
    array_1[1] : 2   
    array_1[2] : 3   

    Enter the number : 2 

    Output:
    Element lesser than 2 is : 1 
    Element greater than 2 is : 3
import java.util.Scanner;
public class Nearest
{
    public static void main(String[] args)
    {
        int k;
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the no. which you want to nearest min and max ");
        k=sc.nextInt();
        int [] intArray = new int [] {52,45,32,64,12,87,78,98,23,7};
        int temp ;
        System.out.println("Original array: ");
        for (int i = 0; i <intArray.length; i++)
        {
            System.out.print(intArray[i] + " ");
        }
        System.out.println();

        for (int i = 0; i <intArray.length; i++)
        {
            for (int j = i+1; j <intArray.length; j++)
            {
                if(intArray[i] >intArray[j])
                {
                    temp = intArray[i];
                    intArray[i] = intArray[j];
                    intArray[j] = temp;
                }
            }
        }
        for (int i = 0; i <intArray.length; i++)
        {
            System.out.print(intArray[i] + " ");
        }
        System.out.println("\n"+k+"  nearest min "+intArray[k-2] + "\n "+k+"nearest max  "+ intArray[k] + " ");

    }
}
***************************************************************************************************************
Q26.P is one-dimensional array of integers. Write a Java program search for a data VAL from P. If VAL is present in the array then “element found ” otherwise “element not found” should be displayed. 
import java.util.Scanner;
public class Practice03
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the size of an Array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        System.out.println("Enter the element to search : ");
        int num=sc.nextInt();
        int count=1;
        for(int i=0;i<n;i++)
        {
            if(num==arr[i])
            {
                System.out.println("Element is avialable at "+i+" index.");
                count++;
            }
        }
        if(count==1)
            System.out.println("Not found");
    }
}
******************************************************************************************
Q25.Write a Java program to swap first and last element of an integer 1-d array.
import java.util.Scanner;
//import java.util.Arrays;
public class Intersection
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the Array size : ");
        int n=sc.nextInt();
        int j=n-1,i;
        int[] arr=new int[n];
        for(i=0;i<n;i++)
        {
            System.out.print("Enter the " + (i + 1) + " element : ");
            arr[i] = sc.nextInt();
        }
        System.out.print("Origional Array : ");
        for(i=0;i<n;i++)
            System.out.print(arr[i]+" ");
        System.out.println();
        arr[0]=arr[0]+arr[j];
        arr[j]=arr[0]-arr[j];
        arr[0]=arr[0]-arr[j];
        System.out.print("Resultant Array : ");
        for(i=0;i<n;i++)
            System.out.print(" "+arr[i]);

    }
}
**********************************************************************************
Q32. Given two arrays of integers A and B of sizes M and N respectively. Write a Write a c program, which will produce a third array named C. such that the following sequence is followed. 
All even numbers of A from left to right are copied into C from left to right. 
All odd numbers of A from left to right are copied into C from right to left. 
All even numbers of B from left to right are copied into C from left to right. 
All old numbers of B from left to right are copied into C from right to left.
e.g., A is {3, 2, 1, 7, 6, 3} and B is {9, 3, 5, 6, 2, 8, 10} the resultant array C is {2, 6, 6, 2, 8, 10, 5, 3, 9, 3, 7, 1, 3} 
public class Intersection
{
    public static void main(String[] args)
    {
        int[] A={3, 2, 1, 7, 6, 3};
        int[] B={9, 3, 5, 6, 2, 8, 10};
        int[] C=new int[A.length+B.length];
        int[] odd=new int[A.length+B.length];
        int m=0;
        int k=0;
        for(int i=0;i<A.length;i++)
        {
            if(A[i]%2==0)
                C[k++]=A[i];
            else
                odd[m++]=A[i];
        }
        for(int i=0;i<B.length;i++)
        {
            if(B[i]%2==0)
                C[k++]=B[i];
            else
                odd[m++]=B[i];
        }
        for(int i=0;i<k;i++)
            System.out.print(C[i]+" ");
        for(int i=m-1;i>=0;i--)
            System.out.print(odd[i]+" ");

    }
}
*****************************************************************************
Q26. Write a Java program to find the largest and smallest element of an array.
import java.util.Scanner;
public class Array01
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n;
        System.out.print("Enter the size of an Array : ");
        n=sc.nextInt();
        int[] arr=new int[n];
        int max= -2147483648;
        int min= 2147483647;
        for(int i=0;i<n;i++)
        {
            System.out.print("Enter the "+(i+1)+" element : ");
            arr[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++)
        {
            if(arr[i]>max)
                max=arr[i];
            if(arr[i]< min)
                min = arr[i];

        }

        System.out.println("Minimum element = "+min);
        System.out.println("Maximum element = "+max);

    }
}
***************************************************************************
Q31. Suppose X. Y, Z are arrays of integers of size M, N, and M + N respectively. The numbers in array X and Y appear in descending order. Write a java program to produce third array Z by merging arrays X and Y in descending order. 
class Test {
  public static void main(String args[]) {
   
    int i,j;
    int a[]={2,5,8,3,4} ;
    int m =a.length;
    for(i=0;i<a.length;i++)
     {
       for(j=a.length-1;j>i;j--)
       {
         if(a[i]<a[j])
         {
          a[i]=a[i]+a[j];
          a[j]=a[i]-a[j];
          a[i]=a[i]-a[j];
           }
           }
           }
           for(int ele :a)
            System.out.print(" "+ele);
            System.out.println();
               
          int b[]={5,9,8,7,1};
          int n= b.length;
          for(i=0;i<b.length;i++)
          {
              for(j=b.length-1;j>i;j--)
              {
                if(b[i]<b[j])
               {
                 b[i]=b[i]+b[j];
                 b[j]=b[i]-b[j];
                 b[i]=b[i]-b[j];
                 }
                  }
                   }
                    for(int elem :b)
                    System.out.print(" "+elem);
                    System.out.println();
   
                    int c[] = new int [a.length+b.length];
                    int k=0;
     
                    for(i=0;i<a.length;i++)
                    {
                      c[k]=a[i];
                      k++;
                     }
       
                     for(j=0;j<b.length;j++)
                     { c[k]=b[j];
                       k++;
           
                       }
       
                      for(i=0;i<c.length;i++)
       
                       System.out.print(c[i]);
                       System.out.println();
                   
                      for(i=0;i<c.length;i++)
                     {
                       for(j=c.length-1;j>i;j--)
                      {
                       if(c[i]<c[j])
                       {
         c[i]=c[i]+c[j];
         c[j]=c[i]-c[j];
         c[i]=c[i]-c[j];
            }
          }
           }
         
           for(int el :c)
            System.out.print(" "+el);
          System.out.println();
         
     
}
}  
***********************************************************************************
